#!/usr/bin/env python3
#x3.in.filter=^([a-z0-9._-]+)\.(responsetime|(ps_cputime\.(user|syst)))$
#x3.out.filter=^([a-z0-9._-]+)\.(responsetime|(ps_cputime\.(user|syst)))\.average$
import shelve

#   ExtreMon Project
#   Copyright (C) 2009-2012 Frank Marien
#   frank@apsu.be
#
#   This file is part of ExtreMon.
#
#   ExtreMon is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   ExtreMon is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#

from x3plugin import X3IO

class Averages(X3IO):
  def __init__(self):
    self.log("running")
    self.cmas=shelve.open('averages.db')
    X3IO.__init__(self)
    self.receive_forever()

  def receive(self,shuttle):
    for (label,_value) in shuttle:
      try:
        value=float(_value)
        try:
          cma=self.cmas[label]
          cma['value']+=(value-cma['value'])/(cma['count']+1)
          cma['count']+=1
          self.put('%s.average' % (label),'%.2f' % (self.cmas[label]['value']))
          self.cmas[label]=cma
        except KeyError:
          self.cmas[label]={'value':0.0,'count':1}
      except ValueError:
        self.log("Can't parse \"%s\" as numeric (%s)" % (_value,label))

Averages()

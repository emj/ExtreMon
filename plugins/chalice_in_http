#!/usr/bin/python3
#x3.listen.addr=localhost
#x3.listen.port=17617
#x3.out.filter=\.(responding|(responder(\.comment)?))$

#
# ExtreMon Project
# Copyright (C) 2009-2012 Frank Marien
# frank@apsu.be
#  
# This file is part of ExtreMon.
#    
# ExtreMon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ExtreMon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#

import            sys, re, sre_constants
from urllib.parse import  unquote
from http.server  import  HTTPServer,BaseHTTPRequestHandler
from socketserver import  ThreadingMixIn
from socket       import  error
from time         import  sleep
from x3plugin     import  X3Out


class HTTPChalicePostHandler(BaseHTTPRequestHandler):
  server_version = "Extremon/0.2"

  def body_response(self,text):
    textBytes=bytes('%s\n' % (text,),'utf-8')
    self.send_header("Content-type", "text/plain")
    self.send_header("Content-Length",len(textBytes))
    self.end_headers()                                                  
    self.wfile.write(textBytes)
    self.wfile.flush()

  def log_message(format,*args):
    pass

  def do_POST(self):
    clen=self.headers.get('content-length')
    if clen:
      clen=int(clen)
    else:
      self.server.log('POST ERROR: missing content-length')
      return
    shuttleBytes=self.rfile.read(clen)
    if shuttleBytes!=None and len(shuttleBytes)>4:
      recordsPosted=0
      shuttle=str(shuttleBytes,'utf-8')
      for line in shuttle.splitlines():
        if len(line)>0:
          try:
            (label,value)=line.split('=')
            self.server.put(label,value)
            recordsPosted+=1
          except ValueError:
            self.server.log("Can't Parse [%s]" % (line))
      self.send_response(202,'Accepted')
      self.body_response('%d Records Enqueued' % (recordsPosted,))
    else:
      self.send_response(400,'Bad Request')
      self.body_response('Not A Valid Shuttle')
      

class HTTPChalicePostServer(ThreadingMixIn,HTTPServer,X3Out):
  def __init__(self):
    X3Out.__init__(self)
    listen=(self.config['listen.addr'],int(self.config['listen.port']))
    HTTPServer.__init__(self,listen,HTTPChalicePostHandler)
    self.log("starting")
    self.serve_forever()

HTTPChalicePostServer()

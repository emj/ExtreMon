#!/usr/bin/python3
#x3.listen.addr=localhost
#x3.listen.port=17617
#x3.prefix=be.fedict.eid.mon.operators
#x3.out.filter=^be\.fedict\.eid\.

#
# ExtreMon Project
# Copyright (C) 2009-2012 Frank Marien
# frank@apsu.be
#  
# This file is part of ExtreMon.
#    
# ExtreMon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ExtreMon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#

import            sys, re, sre_constants
from urllib.parse import  unquote
from http.server  import  HTTPServer,BaseHTTPRequestHandler
from socketserver import  ThreadingMixIn
from socket       import  error
from time         import  sleep
from x3plugin     import  X3Out
from threading    import  Thread,Lock


class HTTPChalicePostHandler(BaseHTTPRequestHandler):
  server_version = "Extremon/0.2"

  def body_response(self,text):
    textBytes=bytes('%s\n' % (text,),'utf-8')
    self.send_header("Content-type", "text/plain")
    self.send_header("Content-Length",len(textBytes))
    self.end_headers()                                                  
    self.wfile.write(textBytes)
    self.wfile.flush()

#  def log_message(format,*args):
#    pass

  def get_client_id_from_beid(self,headers):
    idParts=[]
    firstNamesStr=headers.get('X-FirstNames')
    if firstNamesStr!=None:
      firstNames=firstNamesStr.split(' ')
      idParts.append(firstNames[0])
    lastName=headers.get('X-LastName')
    if lastName!=None:
      idParts.append(lastName)
    return ' '.join(idParts).encode('raw_unicode_escape').decode('utf-8')

  def do_POST(self):
    self.client_ip=self.headers.get('X-Forwarded-For')
    self.client_id=self.get_client_id_from_beid(self.headers)
    if len(self.client_id)<1:
      self.client_id=self.client_ip
    self.client_id_label=self.client_id.lower().replace(' ','_')
    clen=self.headers.get('content-length')
    if clen:
      clen=int(clen)
    else:
      self.server.log('POST ERROR: missing content-length')
      return
    shuttleBytes=self.rfile.read(clen)
    if shuttleBytes!=None and len(shuttleBytes)>4:
      recordsPosted=0
      shuttle=str(shuttleBytes,'utf-8')
      for line in shuttle.splitlines():
        if len(line)>0:
          try:
            (_label,value)=line.split('=')
            self.server.log(_label)
            _labelparts=_label.split('.')
            if _label.endswith('.responding'):
              label='.'.join(_labelparts[:-1])
              if value=='1':
                self.server.set_responding(label,user=self.client_id)
              else:
                self.server.unset_responding(label)
            elif _label.endswith('.responder.comment'):
              label='.'.join(_labelparts[:-2])
              self.server.set_responding(label,user=self.client_id,comment=value)
            recordsPosted+=1
          except ValueError:
            self.server.log("Can't Parse [%s]" % (line))
      self.send_response(202,'Accepted')
      self.body_response('%d Records Enqueued' % (recordsPosted,))
    else:
      self.send_response(400,'Bad Request')
      self.body_response('Not A Valid Shuttle')
      

class HTTPChalicePostServer(ThreadingMixIn,HTTPServer,X3Out,Thread):
  def __init__(self):
    X3Out.__init__(self)
    Thread.__init__(self,name='ChalicePostLoop')
    self.daemon=True
    self.responding={}
    self.responding_lock=Lock()
    self.prefix=self.config['prefix']
    listen=(self.config['listen.addr'],int(self.config['listen.port']))
    HTTPServer.__init__(self,listen,HTTPChalicePostHandler)
    self.log("starting")
    self.start()
    self.serve_forever()

  def run(self):
    self.running=True
    while self.running:
      with self.responding_lock:
        for (label,resp_rec) in self.responding.items():
          self.put('%s.responding' % (label,),1)
          for (name,data) in resp_rec.items():
            self.put('%s.responder.%s' % (label,name,),data)
      sleep(1)

  def set_responding(self,label,user=None,comment=None):
    self.log('set %s RESPONDING on %s with comment %s' % (user,label,comment,))
    with self.responding_lock:
      try:
        resp_rec=self.responding[label]
      except KeyError:
        resp_rec={}
        self.responding[label]=resp_rec
      if user!=None:
        resp_rec['name']=user
      if comment!=None:
        resp_rec['comment']=comment
  
  def unset_responding(self,label):
    self.log('unset RESPONDING on %s' % (label,))
    with self.responding_lock:
      self.put('%s.responding' % (label,),0)
      try:
        del self.responding[label]
      except KeyError:
        self.log('state out of sync for [%s]' % (label))
    

HTTPChalicePostServer()

#!/usr/bin/env python3
#x3.listen.addr=localhost
#x3.listen.port=17817
#x3.prefix=be.fedict.eid.mon.isolde
#x3.in.filter=^be\.(fedict|apsu|colifra)
#x3.out.filter=consumers\.(count|identities)$
#x3.loop.protected=yes

#
# ExtreMon Project
# Copyright (C) 2009-2013 Frank Marien
# frank@apsu.be
#  
# This file is part of ExtreMon.
#    
# ExtreMon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ExtreMon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#

import            sys, re, sre_constants
from urllib.parse import  unquote
from http.server  import  HTTPServer,BaseHTTPRequestHandler
from socketserver import  ThreadingMixIn
from queue        import  Queue,Full
from socket       import  error
from extremon     import  CauldronReceiver,ChaliceServer
from threading    import  Thread
from x3plugin     import  X3IO


class HTTPSelectiveChaliceRequestHandler(BaseHTTPRequestHandler):
  server_version = "Extremon/0.2"

  def valid_selector(self,path):
    return re.match('^[a-z0-9_:;/.*(|)$?-]*$',path)

  def regexify(self,path):
    pathelems=path[1:].split('/')
    if len(pathelems)==0:
      return '.*'
    for i in range(0,len(pathelems)):
      if pathelems[i]=='*':
        pathelems[i]='([a-z0-9_:;-]+)'
      elif pathelems[i]=='**':
        pathelems[i]='([a-z0-9_:;.-]+)'
    return '^%s' % ('\.'.join(pathelems))

  def assemble_shuttle(self,data):
    for line in str(data,'UTF-8').splitlines():
      if len(line)>0:
        (label,value)=line.split('=')
        if label and value:
          try:
            select=self.select_cache[label]
          except KeyError:
            select=(self.regex.match(label)!=None)
            self.select_cache[label]=select
          if select:
            self.shuttle.add('%s=%s' % (label,value))

  def get_client_id_from_beid(self,headers):
    idParts=[]
    firstNamesStr=headers.get('X-FirstNames')
    if firstNamesStr!=None:
      firstNames=firstNamesStr.split(' ')
      idParts.append(firstNames[0])
    lastName=headers.get('X-LastName')
    if lastName!=None:
      idParts.append(lastName)
    return ' '.join(idParts).encode('raw_unicode_escape').decode('utf-8')

  def do_GET(self):
    self.shuttle=set()
    self.select_cache={}
    self.client_ip=self.headers.get('X-Forwarded-For')
    self.client_id=self.get_client_id_from_beid(self.headers) 
    if len(self.client_id)<1:
      self.client_id=self.client_ip
    path=unquote(self.path)
    if path and self.valid_selector(path):
      try:
        regex=self.regexify(path)
        if regex:
          self.regex=re.compile(regex)
          self.server.log(regex)
      except sre_constants.error:
        self.send_error(400,'Invalid Selector')
        return
    else:
      self.server.log(path)
      self.send_error(400,'Invalid Character In Request')
      return

    try:
      self.send_response(200)
      self.send_header("Content-type", "text/plain")
      self.send_header("Access-Control-Allow-Origin", "*")
      self.end_headers()
      self.running=True
      self.outq=Queue(maxsize=1000)
      self.server.log('%s subscribed to [%s] from [%s]' % (self.client_id,path,self.client_ip))
      self.server.add_consumer(self)
      while self.running:
        try:
          data=self.outq.get()
          self.shuttle.clear()
          self.assemble_shuttle(data)
          if len(self.shuttle)>0:
            self.wfile.write(bytes( '%s\n\n' % ('\n'.join(self.shuttle)),
                                    'UTF-8'))
          self.outq.task_done()
        except error:
          self.running=False
    finally:
      self.server.remove_consumer(self)
      self.server.log('%s [%s] unsubscribed' % (self.client_id,self.client_ip))

  def write(self,data):
    try:
      self.outq.put(data,block=False)
    except Full:
      pass
      
class HTTPSelectiveChaliceServer(ThreadingMixIn,ChaliceServer,HTTPServer):
  def __init__(self,listen,prefix,dispatcher):
    self.dispatcher=dispatcher
    HTTPServer.__init__(self,listen,HTTPSelectiveChaliceRequestHandler)
    ChaliceServer.__init__(self,prefix)
    self.log("chalice server started")

  def log(self,message):
    self.dispatcher.log(message)

class HTTPSelectiveChaliceDispatcher(X3IO,Thread):
  def __init__(self):
    Thread.__init__(self,name='HTTPSelectiveChaliceDispatcher')
    self.daemon=True
    X3IO.__init__(self)
    listen_addr=self.config['listen.addr']
    listen_port=int(self.config['listen.port'])
    self.prefix=self.config['prefix']
    self.server=HTTPSelectiveChaliceServer((listen_addr,listen_port),self.prefix,self)
    self.log("starting")
    self.server.start()
    self.start()
    self.server.serve_forever()

  def run(self):
    self.receive_forever()

  def receive(self,data):
    self.server.write(data)
    consumers=self.server.get_consumers()
    self.put('%s.consumers.count' % (self.prefix),len(consumers))
    if len(consumers)>0:
      self.put('%s.consumers.identities' % (self.prefix),' | '.join(sorted([cons.client_id for cons in consumers])))

HTTPSelectiveChaliceDispatcher()

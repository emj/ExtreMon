#!/usr/bin/python3
#x3.in.filter=^([a-z0-9._-]+)\.df_complex\.(free|reserved|used)\.value$
#x3.out.filter=^([a-z0-9._-]+)\.df_complex\.(free|reserved|used)\.percentage$
import re
from x3plugin import X3IOC
#-------------------------------------------------------------------------

class DF(X3IOC):
  def __init__(self):
    self.regex=re.compile('^(?P<prefix>[a-z0-9._-]+)\\.'
                          '(?P<measure>free|reserved|used)\\.'
                          'value$')
    self.paramCache={}
    X3IOC.__init__(self)

  def receive(self,shuttle):
    for (label,value) in shuttle.items():
      params=None
      try:
        params=self.paramCache[label]
      except KeyError:
        matches=self.regex.match(label)
        if matches:
          params=matches.groupdict()
          self.paramCache[label]=params
        else:
          self.paramCache[label]=None
      if params:
        self.compute_percentages(params)

  def compute_percentages(self,params):
    try:
      prefix=params['prefix']
      free=float(self.cached['%s.free.value' % (prefix)])
      reserved=float(self.cached['%s.reserved.value' % (prefix)])
      used=float(self.cached['%s.used.value' % (prefix)])
      total=free+reserved+used
      self.contribute('%s.free.percentage' % (prefix),str((free/total)*100.0))
      self.contribute('%s.reserved.percentage' % (prefix),str((reserved/total)*100.0))
      self.contribute('%s.used.percentage' % (prefix),str((used/total)*100.0))
    except KeyError:
      self.log("%s not complete yet" % (prefix))

DF()

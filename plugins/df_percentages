#!/usr/bin/python3
#x3.in.filter=^(?P<prefix>[a-z0-9._-]+\.df_complex)\.(free|reserved|used)\.value$
#x3.out.filter=^(?P<prefix>[a-z0-9._-]+\.df_complex)\.(free|reserved|used)\.percentage$
from x3plugin import X3IO
#-------------------------------------------------------------------------

class DF(X3IO):
  def __init__(self):
    self.log("running")
    X3IO.__init__(self,cache=True,capture=True)

  def receive(self,shuttle):
    for (label,value,captures) in shuttle:
      try:
        prefix=captures['prefix']
        free=float(self.cached['%s.free.value' % (prefix)])
        reserved=float(self.cached['%s.reserved.value' % (prefix)])
        used=float(self.cached['%s.used.value' % (prefix)])
        total=free+reserved+used
        self.put('%s.free.percentage' % (prefix),str((free/total)*100.0))
        self.put('%s.reserved.percentage' % (prefix),str((reserved/total)*100.0))
        self.put('%s.used.percentage' % (prefix),str((used/total)*100.0))
      except KeyError:
        pass
DF()

#!/usr/bin/python3
#x3.in.filter=^(?P<prefix>[a-z0-9._-]+)\.df\.(?P<mountpoint>[a-z-]+)\.df_complex\.(?P<measure>free|reserved|used)\.percentage$
#x3.out.filter=^(?P<prefix>[a-z0-9._-]+)\.df\.(?P<mountpoint>[a-z-]+)\.df_complex\.(?P<measure>free|reserved|used)\.percentage\.state$

#   ExtreMon Project
#   Copyright (C) 2009-2012 Frank Marien
#   frank@apsu.be
#
#   This file is part of ExtreMon.
#
#   ExtreMon is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   ExtreMon is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#
from x3plugin import X3IO
import re

free_thresholds={'root':(50,25),'boot':(75,50),'home':(20,5),
                 'opt':(75,60),'tmp':(80,75), 'var':(80,40),
                 'data':(50,25),'usr':(80,75),
                 'opt-app':(70,55),'opt-log':(90,80),'opt-tmp':(80,75),
                 'sisadm':(95,90),'sftw':(1,2),
                 'dev':(0,0),'dev-shm':(100,90),'run':(99,89),
                 'var-tmp':(99,89),'var-spool':(90,80)}

class DFState(X3IO):
  def __init__(self):
    self.log("running")
    self.simplifies={}
    self.sys_opt_re=re.compile('^opt-eid-[a-z-]+-(app|log|tmp)$')
    X3IO.__init__(self,cache=True,capture=True)
    self.receive_forever()

  def receive(self,shuttle):
    for (label,value,captures) in shuttle:
      try:
        value=float(value)
        prefix=captures['prefix']
        _mountpoint=captures['mountpoint']
        measure=captures['measure']
        try:
          mountpoint=self.simplifies[_mountpoint]
        except KeyError:
          mount_matches=self.sys_opt_re.match(_mountpoint)
          if mount_matches:
            mountpoint='opt-%s' % (mount_matches.group(1))
          else:
            mountpoint=_mountpoint
          self.simplifies[_mountpoint]=mountpoint

        try:
          (warn_thresh,err_thresh)=free_thresholds[mountpoint]
          if measure=='free':
            if value<err_thresh:
              self.put('%s.df.%s.df_complex.free.percentage.state' % (prefix,_mountpoint),'2')
              self.put('%s.df.%s.df_complex.used.percentage.state' % (prefix,_mountpoint),'2')
            elif value<warn_thresh:
              self.put('%s.df.%s.df_complex.free.percentage.state' % (prefix,_mountpoint),'1')
              self.put('%s.df.%s.df_complex.used.percentage.state' % (prefix,_mountpoint),'1')
            else:
              self.put('%s.df.%s.df_complex.free.percentage.state' % (prefix,_mountpoint),'0')
              self.put('%s.df.%s.df_complex.used.percentage.state' % (prefix,_mountpoint),'0')
        except KeyError:
          pass
        
      except KeyError:
        pass
DFState()

#!/usr/bin/env python3
#x3.out.filter=^(?P<prefix>[a-z0-9._-]+\.httpprobe)\.(result|responsetime|result\.comment)$
#x3.prefix=be.fedict.eid
#x3.timeout=10
#x3.interval=1

#   ExtreMon Project
#   Copyright (C) 2009-2013 Frank Marien
#   frank@apsu.be
#
#   This file is part of ExtreMon.
#
#   ExtreMon is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   ExtreMon is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#

import socket
import urllib.request,time,datetime,sys,os,socket,json
from threading import Thread
from queue import Queue
from x3plugin import X3Out
#------------------------------------------------------------------------

# NoRedirect Solution (the 3 lines below these comment lines)
# are by Tzury Bar Yochay
# http://stackoverflow.com/questions/110498/
# is-there-an-easy-way-to-request-a-url-in-python-and-not-follow
# -redirects/110808
class NoRedirect(urllib.request.HTTPRedirectHandler):
    def redirect_request(self,req,fp,code,msg,hdrs,newurl):
        pass

class ResponseTimeProbe(Thread):
  def __init__(self,id,patient,interval,timeout,handler,prefix):
    Thread.__init__(self,name='ReponseTimeProbe [%s]' %(id))
    self.daemon=True
    self.id=id
    self.config=patient
    self.interval=interval
    self.timeout=timeout
    self.handler=handler
    self.diag=[]
    self.result=0
    if 'follow' not in self.config or self.config['follow']=='no':
      self.opener=urllib.request.build_opener(NoRedirect).open
    else:
      self.opener=urllib.request.urlopen

  def put(self,result,text):
    if result>self.result:
      self.result=result
    if text!=None and len(text)>0:
      self.diag.append(text)

  def clear(self):
    self.result=0
    del self.diag[:]

  def run(self):
    self.clear()
    self.running=True
    while self.running:
      start=time.time()
      try:
        socket=self.opener(self.config['url'], timeout=self.timeout)
        self.put(0,'connection ok')
        data=socket.read()
        if data!=None and len(data)>0:
            self.put(0,'read %d' % (len(data)))
            if 'expect_text' in self.config:
              if str(data,'utf-8').find(self.config['expect_text'])==-1:
                self.put(2,'exp text [%s] missing' % (self.config['expect_text']))
              else:
                self.put(0,'exp text ok')
        else:
            self.put(2,'no data')
      except urllib.error.HTTPError as response:
        try:
            if response.code!=self.config['expect_code']:
              self.put(2,'exp resp [%d] got [%d]' % (self.config['expect_code'],response.code))
            else:
              self.put(0,'resp [%d] ok' % (response.code));
        except KeyError:
          self.put(2,'exp data got resp [%d]' % (response.code))
      except urllib.error.URLError as urlError:
          self.put(2,'url error %s' % (urlError.reason))
      except BaseException as ouch:
        self.put(2,"fix httprobe for [%s]" % (ouch))
      
      self.handler.put("%s.%s.httpprobe.responsetime" % (self.handler.prefix, self.id), (time.time()-start)*1000.0)
      self.handler.put("%s.%s.httpprobe.result" % (self.handler.prefix, self.id),self.result)

      if len(self.diag)>0:
        self.handler.put('%s.%s.httpprobe.result.comment' % (self.handler.prefix,self.id), ', '.join(self.diag))

      self.clear()
      time.sleep(self.interval)

  def stop(self):
    self.running=False
      
class ResponseTimeProbes(X3Out):
  def __init__(self,patients):
    X3Out.__init__(self)
    socket.setdefaulttimeout(int(self.config['timeout']))
    self.patients=patients
    self.interval=float(self.config['interval'])
    self.timeout=float(self.config['timeout'])
    self.prefix=self.config['prefix']
    socket.setdefaulttimeout(int(self.timeout))

    for (id,patient) in self.patients.items():
      try:
        interval=patient['interval']
      except KeyError:
        interval=self.interval

      ResponseTimeProbe(id=id,
                        patient=patient,
                        interval=interval,
                        timeout=self.timeout,
                        prefix=self.prefix,
                        handler=self).start()
    self.log('running')
    while True:
      time.sleep(10)

if __name__=='__main__':
  with open('/etc/x3_httpprobes.conf','r') as confFile:
    patients=json.load(confFile)
  ResponseTimeProbes(patients=patients)

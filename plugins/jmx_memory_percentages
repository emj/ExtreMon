#!/usr/bin/python3
#x3.in.filter=^(?P<prefix>[a-z0-9._-]+\.jmx_memory)\.(init|committed|used|max)\.value$
#x3.out.filter=^(?P<prefix>[a-z0-9._-]+\.jmx_memory)\.(init|committed|used|max)\.percentage$
import re
from x3plugin import X3IO
#-------------------------------------------------------------------------

class JAVAMEM(X3IO):
  def __init__(self):
    X3IO.__init__(self,cache=True,capture=True)

  def receive(self,shuttle):
    for (label,value,captures) in shuttle:
      try:
        prefix=captures['prefix']
        init=float(self.cached['%s.init.value' % (prefix)])
        committed=float(self.cached['%s.committed.value' % (prefix)])
        used=float(self.cached['%s.used.value' % (prefix)])
        max=float(self.cached['%s.max.value' % (prefix)])
        self.put('%s.init.percentage' % (prefix),str((init/max)*100.0))
        self.put('%s.committed.percentage' % (prefix),str((committed/max)*100.0))
        self.put('%s.used.percentage' % (prefix),str((used/max)*100.0))
        self.put('%s.max.percentage' % (prefix),'100.0')
      except KeyError:
        self.log("%s not complete yet" % (prefix))

JAVAMEM()
  


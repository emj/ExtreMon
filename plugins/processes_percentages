#!/usr/bin/env python3
#x3.in.filter=^(?P<prefix>[a-z0-9._-]+\.processes\.ps_state)\.(running|blocked|sleeping|zombies|paging|stopped)$
#x3.out.filter=^(?P<prefix>[a-z0-9._-]+\.processes\.ps_state)\.(running|blocked|sleeping|zombies|paging|stopped)\.percentage$

#   ExtreMon Project
#   Copyright (C) 2009-2012 Frank Marien
#   frank@apsu.be
#
#   This file is part of ExtreMon.
#
#   ExtreMon is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   ExtreMon is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#
from x3plugin import X3IO

class PROCESSES(X3IO):
  def __init__(self):
    self.log("running")
    X3IO.__init__(self,cache=True,capture=True)
    self.receive_forever()

  def receive(self,shuttle):
    for (label,value,captures) in shuttle:
      try:
        prefix=captures['prefix']
        running=float(self.cached['%s.running' % (prefix,)])
        blocked=float(self.cached['%s.blocked' % (prefix,)])
        sleeping=float(self.cached['%s.sleeping' % (prefix,)])
        zombies=float(self.cached['%s.zombies' % (prefix,)])
        paging=float(self.cached['%s.paging' % (prefix,)])
        stopped=float(self.cached['%s.stopped' % (prefix,)])
        total=running+blocked+sleeping+zombies+paging+stopped
        self.put('%s.running.percentage' % (prefix,),((running/total)*100.0))
        self.put('%s.blocked.percentage' % (prefix,),((blocked/total)*100.0))
        self.put('%s.sleeping.percentage' % (prefix,),((sleeping/total)*100.0))
        self.put('%s.zombies.percentage' % (prefix,),((zombies/total)*100.0))
        self.put('%s.paging.percentage' % (prefix,),((paging/total)*100.0))
        self.put('%s.stopped.percentage' % (prefix,),((stopped/total)*100.0))
      except KeyError:
        pass

PROCESSES()

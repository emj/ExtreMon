#!/usr/bin/env python3
#x3.in.filter=^(?P<prefix>[a-z0-9._-]+\.swap\.swap\.(?P<measure>used|free|cached)\.percentage)$
#x3.out.filter=^(?P<prefix>[a-z0-9._-]+\.swap\.swap\.(?P<measure>used|free|cached)\.percentage)\.state$

#   ExtreMon Project
#   Copyright (C) 2009-2012 Frank Marien
#   frank@apsu.be
#
#   This file is part of ExtreMon.
#
#   ExtreMon is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   ExtreMon is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#
from x3plugin import X3IO
import re

thresh={'used'    :{'alrt':{'low':0,'high':40},'warn':{'low':0,'high':20}},
        'cached'  :{'alrt':{'low':0,'high':40},'warn':{'low':0,'high':20}},
        'free'    :{'alrt':{'low':60,'high':101},'warn':{'low':80,'high':101}}}

class SWAPState(X3IO):
  def __init__(self):
    self.log("running")
    X3IO.__init__(self,cache=True,capture=True)
    self.receive_forever()

  def receive(self,shuttle):
    for (label,value,captures) in shuttle:
      try:
        value=float(value)
        prefix=captures['prefix']
        measure=captures['measure']
        try:
          alrt=thresh[measure]['alrt']
          warn=thresh[measure]['warn']
          if value<alrt['low'] or value>alrt['high']:
            self.put('%s.state' % (prefix,),'2')
          elif value<warn['low'] or value>warn['high']:
            self.put('%s.state' % (prefix,),'1')
          else:
            self.put('%s.state' % (prefix,),'0')
        except KeyError:
          self.log('Unknown measure [%s] in [%s]' % (measure,label,))
      except KeyError:
        self.log('Missing measure in [%s]' % (label,))
SWAPState()

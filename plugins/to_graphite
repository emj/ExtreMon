#!/usr/bin/env python3
#x3.in.filter=^be\.(fedict|apsu|colifra)
#x3.ignore=(sequence|comment|responding|responder)$
#x3.in.value.filter=^[0-9.]+$

#
# ExtreMon Project
# Copyright (C) 2009-2012 Frank Marien
# frank@apsu.be
#  
# This file is part of ExtreMon.
#    
# ExtreMon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ExtreMon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#

import re,socket,sys
from time import time
from pickle import dumps
import socket,struct
from x3plugin import X3In

# [(path, (timestamp, value)), ...]

class GraphiteFeed(X3In):
	def __init__(self,carbon_addr=('localhost',2004)):
		X3In.__init__(self)
		self.allows={}
		self.passtographite=[]
		self.ignore=re.compile(self.config['ignore'])
		self.carbon_addr=carbon_addr
		self.carbon=None
		self.receive_forever()	

	def ensure_connection(self):
		if self.carbon!=None:
			return True
		for (af,socktype,proto,canonname,sa) in socket.getaddrinfo(self.carbon_addr[0],self.carbon_addr[1], socket.AF_UNSPEC, socket.SOCK_STREAM):
			try:
				self.carbon=socket.socket(af,socktype,proto)
				self.log("created socket")
			except socket.error as msg:
				self.carbon=None
				continue
			try:
				self.carbon.connect(sa)
				self.log("connected")
				return True
			except socket.error as msg:
				self.carbon.close()
				self.carbon=None
				continue
		return False

	def receive(self,data):
		if not self.ensure_connection():
			self.log("connection failed")
			return
		timestamp=int(time())
		for(label,value) in data:
			if label.endswith('timestamp'):
				timestamp=int(value)
			try:	
				allow=self.allows[label]
			except KeyError:
				allow=(self.ignore.search(label)==None)
				self.allows[label]=allow
			if allow:
				self.passtographite.append((label,(timestamp,float(value))))
		if len(self.passtographite)>0:
			payload=dumps(self.passtographite,protocol=2)
			header=struct.pack("!L", len(payload))
			message=header+payload
			self.carbon.sendall(message)
		del self.passtographite[:]

GraphiteFeed()

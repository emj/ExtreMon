#!/usr/bin/python3
#x3.in.filter=^(?P<prefix>[a-z0-9._-]+\.trust\.app[1-9]\.snmp\.(?P<metric>counter\.failure_crl|counter\.cache_misses|gauge\.cache_hit_percent))$
#x3.out.filter=^(?P<prefix>[a-z0-9._-]+\.trust\.app[1-9]\.snmp\.(?P<metric>counter\.failure_crl|counter\.cache_misses|gauge\.cache_hit_percent))\.state$

#   ExtreMon Project
#   Copyright (C) 2009-2012 Frank Marien
#   frank@apsu.be
#
#   This file is part of ExtreMon.
#
#   ExtreMon is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   ExtreMon is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#
from x3plugin import X3IO
import re

class TRUSTSTATE(X3IO):
  def __init__(self):
    self.log("running")
    X3IO.__init__(self,capture=True)
    self.receive_forever()

  def receive(self,shuttle):
    for (label,value,captures) in shuttle:
      value=float(value)
      try:
        prefix=captures['prefix']
        metric=captures['metric']
      except KeyError:
        self.log('Missing Metric In [%s]' % (label,))
        continue
      if metric in ['counter.failure_crl','counter.cache_misses']:
        if value>0.0:
          self.put('%s.state' % (prefix,),'2')
        else:
          self.put('%s.state' % (prefix,),'0')
      elif metric=='gauge.cache_hit_percent':
        if value<100.0:
          self.put('%s.state' % (prefix,),'2')
        else:
          self.put('%s.state' % (prefix,),'0')
      else:
          self.log('Unknown Metric [%s]' % (metric,))

TRUSTSTATE()

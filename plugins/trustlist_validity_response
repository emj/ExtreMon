#!/usr/bin/python3
#x3.prefix=be.fedict.eid.ext.tsl
#x3.url=http://tsl.belgium.be/tsl-be.xml
#x3.delay=1000
#x3.error.comment=Unable To Acquire TrustList
#x3.ok.comment=Valid For 6 Weeks Or More
#x3.validity.warning.comment=Less Than 6 Weeks Of Validity Left. Signing Ceremony Planning Required.
#x3.validity.warning.threshold=3628800
#x3.validity.error.comment=Valid For Less Than 2 Weeks! If No Signing Ceremony Occurred, Validity Will Expire Before Replacement!!
#x3.validity.error.threshold=1209600
#x3.out.filter=^be\.fedict\.eid\.ext\.tsl\.(result|result\.comment|responsetime|validityleft)$

#   ExtreMon Project
#   Copyright (C) 2009-2012 Frank Marien
#   frank@apsu.be
#
#   This file is part of ExtreMon.
#
#   ExtreMon is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   ExtreMon is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ExtreMon.  If not, see <http://www.gnu.org/licenses/>.
#

import urllib.request,time,datetime,sys,os
from urllib.request import urlopen
from lxml import etree
from x3plugin import X3Out

class TSLProbe(X3Out):
  def __init__(self):
    self.log("running")
    X3Out.__init__(self)
    self.url=self.config['url']
    self.prefix=self.config['prefix']
    self.delay=float(self.config['delay'])/1000.0
    self.validityWarnTresh=int(self.config['validity.warning.threshold'])
    self.validityErrorTresh=int(self.config['validity.error.threshold'])
    self.validityWarnComment=self.config['validity.warning.comment']
    self.validityErrorComment=self.config['validity.error.comment']
    self.errorComment=self.config['error.comment']
    self.okComment=self.config['ok.comment']
    self.namespaces={'tsl': 'http://uri.etsi.org/02231/v2#'}

    while True:
      try:
        start=time.time()
        socket=urlopen(self.url)
        status=etree.parse(socket)
        end=time.time()

        nextUpdateElementList=status.xpath('//tsl:TrustServiceStatusList/tsl:SchemeInformation/tsl:NextUpdate/tsl:dateTime',namespaces=self.namespaces)
        nextUpdateStr=nextUpdateElementList[0].text
        nextUpdate=datetime.datetime.strptime(nextUpdateStr, "%Y-%m-%dT%H:%M:%S.%fZ")
        timeUntilNextUpdate=nextUpdate-datetime.datetime.now()

        secondsUntilNextUpdate=int(timeUntilNextUpdate.total_seconds())

        self.put('%s.responsetime' % (self.prefix),'%.2f' % ((end-start)*1000.0))
        self.put('%s.validityleft' % (self.prefix),secondsUntilNextUpdate)

        if secondsUntilNextUpdate<self.validityErrorTresh:
          self.put('%s.result' % (self.prefix),2)
          self.put('%s.result.comment' % (self.prefix),self.validityErrorComment)
        elif secondsUntilNextUpdate<self.validityWarnTresh:
          self.put('%s.result' % (self.prefix),1)
          self.put('%s.result.comment' % (self.prefix),self.validityWarnComment)
        else:
          self.put('%s.result' % (self.prefix),0)
          self.put('%s.result.comment' % (self.prefix),self.okComment)

        time.sleep(self.delay)
      except:
        self.put('%s.result' % (self.prefix),2)
        self.put('%s.result.comment' % (self.prefix),self.errorComment)

if __name__=='__main__':
  TSLProbe()
